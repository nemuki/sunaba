// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package dev.nemuki.infra.repository.mapper.sandbox

import java.sql.Connection
import java.sql.SQLException
import java.sql.Statement
import java.time.LocalDateTime

const val getSandboxDataById = """-- name: getSandboxDataById :one
select id, username, email, created_at from main.sandbox_data
where id = ?
"""

const val listSandboxData = """-- name: listSandboxData :many
select id, username, email, created_at from main.sandbox_data
order by id
"""

class QueriesImpl(private val conn: Connection) : Queries {

  @Throws(SQLException::class)
  override fun getSandboxDataById(id: Int): MainSandboxDatum? {
    return conn.prepareStatement(getSandboxDataById).use { stmt ->
      stmt.setInt(1, id)

      val results = stmt.executeQuery()
      if (!results.next()) {
        return null
      }
      val ret = MainSandboxDatum(
                results.getInt(1),
                results.getString(2),
                results.getString(3),
                results.getObject(4, LocalDateTime::class.java)
            )
      if (results.next()) {
          throw SQLException("expected one row in result set, but got many")
      }
      ret
    }
  }

  @Throws(SQLException::class)
  override fun listSandboxData(): List<MainSandboxDatum> {
    return conn.prepareStatement(listSandboxData).use { stmt ->
      
      val results = stmt.executeQuery()
      val ret = mutableListOf<MainSandboxDatum>()
      while (results.next()) {
          ret.add(MainSandboxDatum(
                results.getInt(1),
                results.getString(2),
                results.getString(3),
                results.getObject(4, LocalDateTime::class.java)
            ))
      }
      ret
    }
  }

}

